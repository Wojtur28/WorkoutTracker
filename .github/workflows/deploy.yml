name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # CI Job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew

      - name: Clean project
        run: ./gradlew clean

      - name: Run Unit Tests
        run: ./gradlew test

      - name: Check Code Quality (Optional)
        run: ./gradlew check

      - name: Generate Test Report
        run: |
          mkdir -p test-reports
          cp -r build/reports/tests/test/* test-reports/

      - name: Upload Test Reports
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test-reports/

  # CD Job - Build and Deploy
  build:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew

      - name: Clean project
        run: ./gradlew clean

      - name: Generate Swagger Code
        run: ./gradlew generateSwaggerCodeWorkoutTrackerApi

      - name: Build without tests
        run: ./gradlew build -x test

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          cat ~/.ssh/known_hosts

      - name: Upload artifact to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          source: "build/libs/WorkoutTracker-*.jar"
          target: "/home"

      - name: Restart Application on VPS
        env:
          VPS_USER: ${{ secrets.SERVER_USER }}
          VPS_HOST: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'EOF'
          sudo systemctl restart workouttracker.service
          EOF
